library(lme4)
library(lmerTest)
library(emmeans)
library(tidyverse)
library(broom.mixed)
events <- read.csv("~/optimizing-memory/data/processed_events_with_AUC.csv")
data <- events |>
filter(type == "WORD", trial_type != "NoStim")
sub_recalled_score_df <- data |> group_by(subject, trial_type, AUC) |>
summarize(sub_recalled = mean(recalled)) |>
mutate(
trial_type = factor(trial_type, levels = c("Neg", "Sham", "Pos")),
AUC_cent = AUC - .5
)
three_way_model <- lmer(sub_recalled ~ trial_type * AUC_cent + (1 | subject), data=sub_recalled_score_df)
summary(three_way_model)
0.432239 / 0.207818
round(2.079892, 3)
round(2.079892, 4)
sub_recalled_score_df$trial_type_num <- sub_recalled_score_df$trial_type %>% as.numeric() - 2
linear_model <- lmer(sub_recalled ~ trial_type_num * AUC_cent + (1 | subject), data=sub_recalled_score_df)
summary(linear_model)
0.21612 / sqrt(0.03766^2 + 0.10267^2)
0.21612 / 0.10267
library(lmerTest)
summary(linear_model)
0.01099 / 0.01116
max_AUC <- max(sub_recalled_score_df$AUC_cent)
RG.max_AUC <- ref_grid(linear_model, at = list(AUC_cent = max_AUC), cov.keep = "trial_type_num" )
trial_type_num.emm <- emmeans(RG.max_AUC, specs=c("trial_type_num"))
plot(trial_type_num.emm)
plot(trial_type_num.emm, comparisons = TRUE)
pwpp(trial_type_num.emm)
trial_type_num.emm
broom_max_auc_emmeans <- tidy(trial_type_num.emm, conf.int=TRUE)
broom_max_auc_emmeans
broom_linear_model <- tidy(linear_model, conf.int=TRUE)
broom_linear_model
summary(three_way_model)
summary(linear_model)
0.21612 / 0.10267
events
# read in properly labeled data
events <- read.csv("~/optimizing-memory/data/processed_events_with_AUC.csv")
# select only WORD trials with one of the three "stim" trial types
data <- events |>
filter(type == "WORD", trial_type == "NoStim")
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ probability + (1|subject), data = data)
# read in properly labeled data
events <- read.csv("~/optimizing-memory/data/processed_events_NiclsCourierClosedLoop.csv")
# select only WORD trials with one of the three "stim" trial types
data <- events |>
filter(type == "WORD", trial_type == "NoStim")
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ probability + (1|subject), data = data)
data
data$probability
# read in properly labeled data
events <- read.csv("~/optimizing-memory/data/RO_encoding_loso_calibration_data.csv")
# read in labels / predictions
data <- read.csv("~/optimizing-memory/data/RO_encoding_loso_calibration_data.csv")
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (1|subject), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (1|subject:session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (1|subject/session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (predicted|subject/session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (0+predicted|subject/session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (predicted|subject/session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (1|subject/session), data = data)
summary(model)
# fit a mixed effects model with random intercepts for subject
model <- lmer(recalled ~ predicted + (predicted|subject/session), data = data)
summary(model)
# create column for predicted label
data$predicted_label <- ifelse(data$predicted > 0.5, 1, 0)
# fit a mixed effects model with random slopes and intercepts for session nested
# within subject
model <- lmer(recalled ~ predicted + (predicted|subject/session), data = data)
summary(model)
data |> group_by(subject) |>
summarize(
mean_recalled = mean(recalled),
mean_predicted = mean(predicted_label),
n = n()
)
data |> group_by(subject, session) |>
summarize(
mean_recalled = mean(recalled),
mean_predicted = mean(predicted_label),
n = n()
)
data |> group_by(subject) |>
summarize(
mean_recalled = mean(recalled),
mean_predicted = mean(predicted_label),
n = n()
)
summary(model)
